# Javascript Concepts

**** functions, objects *****
Everything in Javascript can be considered an object in most real-world uses. Like most other languages, Javascript does have primitives (string, number, boolean), however in most use cases these will be converted as needed automatically by Javascript into their object counterparts. I’m not going to go into the details about primitives, just be aware they exist.

Unlike many languages, Functions are first-class objects and can be created, stored, and passed around the application like any other object. This includes being used as an argument in a function call, where you can pass another function into it. You can also add properties to a function just as you would with any other standard object. Functions can be thought of just like any other object, with the key difference being that you can execute them. This an important concept when we think about Javascript’s version of a Class, which is really just a function. We can then add additional functions onto them as properties, which then become the equivalent of a Class’s methods.


variables 
scope
by reference or value?
inheritance
classic vs prototypical
closures
async vs sync
callback pattern
popular helper libraries
underscore
async.js
ECMAScript 5.1
native JSON
Higher order array methods: forEach(), map(), every(), some(), filter(), reduce(), reduceRight()
trim
 __proto__
Object.getPrototypeOf
'use strict'
